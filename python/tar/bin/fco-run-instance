#!/usr/bin/env python

import warnings
warnings.filterwarnings("ignore", category=DeprecationWarning)

import os
import sys
import traceback

from slipstream.util import nostdouterr
from slipstream.NodeInstance import NodeInstance
from slipstream.NodeDecorator import NodeDecorator
from slipstream.ConfigHolder import ConfigHolder
from slipstream.NodeDecorator import KEY_RUN_CATEGORY, RUN_CATEGORY_DEPLOYMENT
from flexiant.FlexiantCommand import FlexiantCommand
from flexiant.FlexiantClientCloud import FlexiantClientCloud

saved_stdout = sys.stdout

def get_bootstrap_script(self, node_instance, pre_export=None, pre_bootstrap=None, post_bootstrap=None, username=None):
    return os.environ['context_script']

def publish_vm_info(self, vm, node_instance):
    print >> saved_stdout, '%s,%s' % (self._vm_get_id(vm), self._vm_get_ip(vm))


class MainProgram(FlexiantCommand):

    def __init__(self):
        super(MainProgram, self).__init__()

    def setProgramOptions(self):
        self.parser.add_option('--image-uuid', dest='imageUUID',
                                help="The UUID of the Image")

        self.parser.add_option('--network-type', dest='networkType',
                               help="Network Type")

        self.parser.add_option('--context', dest='contextScript',
                               help="Context Script")

        self.parser.add_option('--public-key', dest='publicKey',
                               help="SSH Public Key")

        self.parser.add_option('--vm-name', dest='vmName',
                               help="VM Name")

        self.parser.add_option('--ram', dest='ram', help="RAM")

        self.parser.add_option('--cpu', dest='cpu', help="CPU Count")

        self.parser.add_option('--disk-size', dest='diskSize',
                               help="Disk size in GB")

    def _setUserInfo(self):
        super(MainProgram, self)._setUserInfo()
        self.userInfo['General.ssh.public.key'] = self.options.publicKey

    def doWork(self):
        cn = FlexiantClientCloud.cloudName
        node_instance = NodeInstance({
            'name': self.options.vmName,
            NodeDecorator.CLOUDSERVICE_KEY: cn,
            'image.id': self.options.imageUUID,
            cn + '.cpu': self.options.cpu,
            cn + '.ram': self.options.ram,
            'extra.disk.volatile': '',
            'network': self.options.networkType
        })

        with nostdouterr(self.options.verbose):
            node = self._start_image(node_instance)

        print '%s, %s' % (node['id'], node['ip'])

    def _start_image(self, node_instance):
        os.environ['context_script'] = self.options.contextScript or ''
        FlexiantClientCloud._get_bootstrap_script = get_bootstrap_script
        FlexiantClientCloud._publish_vm_info = publish_vm_info

        options = {'verboseLevel': self.verbose_level + 1,  # hack to increase verbose level
                   KEY_RUN_CATEGORY: RUN_CATEGORY_DEPLOYMENT}
        cc = FlexiantClientCloud(ConfigHolder(options=options,
                                              context={'foo': 'bar'}))
        cc._initialization(self.userInfo)
        try:
            node = cc._start_image(self.userInfo,
                                   node_instance,
                                   node_instance.get_name())
        finally:
            cc._finalization(self.userInfo)

        return {'id': cc._vm_get_id(node), 'ip': cc._vm_get_ip(node)}

if __name__ == "__main__":
    try:
        MainProgram()
    except KeyboardInterrupt:
        print '\n\nExecution interrupted by the user... goodbye!'
    except Exception as e:
        print "Something went wrong:"
        print e
        traceback.print_exc()
        exit(1)
